{"version":3,"sources":["components/StaffPreview.jsx","components/StaffList.jsx","pages/HomePage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["StaffPreview","staff","className","src","avatar","id","firstname","lastname","job","StaffList","staffList","map","key","HomePage","state","data","this","splice","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAYeA,EAVM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpB,OACI,yBAAKC,UAAU,iBACX,yBAAKC,IAAG,UAAKF,EAAMG,OAAX,cAAuBH,EAAMI,MACrC,uBAAGH,UAAU,cAAcD,EAAMK,UAAjC,IAA6CL,EAAMM,UACnD,uBAAGL,UAAU,aAAaD,EAAMO,OCG7BC,EARG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACI,yBAAKR,UAAU,cACVQ,EAAUC,KAAI,SAAAV,GAAK,OAAK,kBAAC,EAAD,CAAcA,MAAOA,EAAOW,IAAKX,EAAMI,UCuC7DQ,E,4MAxCXC,MAAQ,CACJJ,UAAWK,G,uDAEL,IACEL,EAAcM,KAAKF,MAAnBJ,UACR,OACI,yBAAKR,UAAU,uBACX,wBAAIA,UAAU,UAAd,gBACA,6BAASA,UAAU,YACf,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,kBAAd,cAA0C,6BAA1C,OAAuD,6BAAvD,eACA,yBAAKA,UAAU,WACX,uBAAGA,UAAU,iBAAb,cACA,uBAAGA,UAAU,qBAAb,gHAMJ,yBAAKA,UAAU,WACX,uBAAIA,UAAU,iBAAd,eACA,uBAAGA,UAAU,qBAAb,2JASR,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAWQ,UAAWA,EAAUO,OAAO,EAAG,KAC1C,kBAAC,EAAD,CAAWP,UAAWA,EAAUO,OAAO,EAAG,Y,GAjC3CC,aCQRC,MARf,WACE,OACE,yBAAKjB,UAAU,QACb,kBAAC,EAAD,QCMckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9d7cd38b.chunk.js","sourcesContent":["import React from 'react'\n\nconst StaffPreview = ({ staff }) => {\n    return (\n        <div className='staff-preview'>\n            <img src={`${staff.avatar}?u=${staff.id}`} />\n            <p className='staff-name'>{staff.firstname} {staff.lastname}</p>\n            <p className='staff-job'>{staff.job}</p>\n        </div>\n    )\n}\n\nexport default StaffPreview\n","import React from 'react'\nimport StaffPreview from './StaffPreview'\nconst StaffList = ({ staffList }) => {\n    return (\n        <div className='staff-list'>\n            {staffList.map(staff => (<StaffPreview staff={staff} key={staff.id} />))}\n        </div>\n    )\n}\n\nexport default StaffList\n","import React, { Component } from 'react'\nimport data from '../data/staff.json'\nimport StaffList from '../components/StaffList'\nclass HomePage extends Component {\n    state = {\n        staffList: data\n    }\n    render() {\n        const { staffList } = this.state\n        return (\n            <div className='home-page container'>\n                <h1 className='header'>Fintek.co.il</h1>\n                <section className='about-us'>\n                    <div className='content-container'>\n                        <h2 className='about-us-title'> Execution <br></br> is <br></br> everything</h2>\n                        <div className=\"content\">\n                            <p className='content-title'>Who we are</p>\n                            <p className='content-paragraph'>\n                                We are a team of creatively diverse,\n                                driven, and innovative individuals\n                                working to achieve the best we can.\n                    </p>\n                        </div>\n                        <div className=\"content\">\n                            <p  className='content-title'>Our mission</p>\n                            <p className='content-paragraph'>\n                                We want to give our clients the best\n                                and help their businesses succeed.\n                                Together we can make you inspire\n                                to growth even more than where\n                                you are today\n                    </p>\n                        </div>\n                    </div>\n                    <div className='staff-container'>\n                        <StaffList staffList={staffList.splice(0, 3)} />\n                        <StaffList staffList={staffList.splice(0, 3)} />\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default HomePage","import React from 'react';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App \">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.scss'\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}